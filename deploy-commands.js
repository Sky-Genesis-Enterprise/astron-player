// Chargement des variables d'environnement
require('dotenv').config(); // Charge les variables d'environnement depuis .env

// V√©rification du d√©ploiement global (boolean)
const globalDeploy = process.env.GLOBAL_DEPLOY === "true";  
console.log("üåç D√©ploiement global ?", globalDeploy ? "‚úÖ Oui" : "‚ùå Non");

// Import des modules n√©cessaires
const { Routes, REST } = require('discord.js');
const fs = require('fs');
const path = require('path');

// R√©cup√©ration des informations n√©cessaires depuis les variables d'environnement
const token = process.env.BOT_TOKEN;  // Utiliser BOT_TOKEN au lieu de TOKEN
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;

// V√©rification des variables d'environnement
console.log("üîç V√©rification des variables d'environnement...");
console.log("BOT_TOKEN:", token ? "‚úÖ D√©fini" : "‚ùå Manquant");
console.log("GUILD_ID:", guildId ? "‚úÖ D√©fini" : "‚ùå Manquant");
console.log("CLIENT_ID:", clientId ? "‚úÖ D√©fini" : "‚ùå Manquant");

// S'assurer que les variables n√©cessaires sont d√©finies
if (!token || !guildId || !clientId) {
    console.error("‚ùå Erreur : Assurez-vous que BOT_TOKEN, GUILD_ID et CLIENT_ID sont bien d√©finis dans le fichier .env !");
    process.exit(1);  // Arr√™ter l'ex√©cution si une variable est manquante
}

// Chargement des commandes depuis le dossier 'commands'
const commands = [];
const commandsPath = path.resolve(__dirname, 'commands');

// V√©rification de l'existence du dossier 'commands'
if (!fs.existsSync(commandsPath)) {
    console.error('‚ùå Dossier "commands" introuvable !');
    process.exit(1);
}

// Chargement des commandes depuis chaque sous-dossier du dossier 'commands'
fs.readdirSync(commandsPath).forEach(folder => {
    const folderPath = path.join(commandsPath, folder);

    if (!fs.statSync(folderPath).isDirectory()) return;  // V√©rifier si c'est un dossier

    // Charger chaque fichier de commande
    fs.readdirSync(folderPath)
        .filter(file => file.endsWith('.js'))  // Se concentrer sur les fichiers .js
        .forEach(file => {
            const command = require(path.join(folderPath, file));

            // V√©rifier si la commande contient des donn√©es valides
            if (command.data) {
                commands.push(command.data.toJSON());
                console.log(`‚úÖ Commande charg√©e : ${command.data.name}`);
            } else {
                console.warn(`‚ö†Ô∏è Le fichier ${file} ne contient pas de structure de commande valide.`);
            }
        });
});

// Initialisation de l'instance REST pour interagir avec l'API Discord
const rest = new REST({ version: '10' }).setToken(token);

// Fonction asynchrone pour d√©ployer les commandes
(async () => {
    try {
        console.log(`üöÄ D√©ploiement de ${commands.length} commandes...`);

        // D√©finir la route d'API selon le type de d√©ploiement (global ou serveur)
        const route = globalDeploy
            ? Routes.applicationCommands(clientId)  // D√©ploiement global
            : Routes.applicationGuildCommands(clientId, guildId); // D√©ploiement sur un serveur sp√©cifique

        // D√©ploiement des commandes via l'API REST
        await rest.put(route, { body: commands });

        // Message de succ√®s
        console.log(`‚úÖ Commandes d√©ploy√©es avec succ√®s ${globalDeploy ? 'globalement' : `sur le serveur ${guildId}`} !`);
    } catch (error) {
        // Gestion des erreurs lors du d√©ploiement
        console.error('‚ùå Erreur lors du d√©ploiement des commandes :', error);
    }
})();